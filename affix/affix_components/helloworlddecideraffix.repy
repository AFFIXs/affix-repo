"""
<Purpose>
  This is a Hello World Decider Affix. It is an example affix 
  decider that can be used as an example to make decider 
  affixs. In this decider affix, the affix adds a new 
  HelloWorldAffix in its stack when it calls on a getconnection()
  or openconnection(). That way when the socket object is used
  to send() or recv() it has an extra layer of HelloWorldAffix 
  beneath it.

<Author>
  Monzur Muhammad
  monzum@cs.washington.edu

<Date Started>
  April 1st, 2011
"""


					
class HelloWorldDeciderAffix(BaseAffix):

  def __init__(self, affix_stack=AffixStack(), optional_args=None):
    """
    <Purpose>
      Initialize the Hello World Decider Affix. Calls on the init 
      function of the base affix.
    
    <Arguments>
      affix_stack - A affix stack that will be used as the stack
          beneath us. By default an empty affix stack is created.

      optional_args - Any optional args that this affix or any of
          the affixs below us might use.

    <Side Effects>
      None

    <Exceptions>
      None
    """

    BaseAffix.__init__(self, affix_stack, optional_args)



  def tcpserversocket_getconnection(self, tcpserversocket):
    """
    <Purpose>
      This modifies the getconnection() method of this particular
      affix layer. It adds in a new HelloWorldAffix on its stack.

    <Argumetns>
      Same as the base affixs tcpserversocket_getconnection()

    <Side Effect>
      Modifies the stack beneath it.

    <Exceptions>
      Raised if one of the lower affixs raise an exception.

    <Return>
      (remote_ip, remote_port, socket_object)
    """

    # Create a new HelloWorldAffix
    new_affix = HelloWorldAffix(AffixStack(), ['2'])

    this_affix_copy = self.copy()

    # Push the new HelloWorldAffix on to the stack of the copied affix.
    this_affix_copy.affix_context['affix_stack'].push(new_affix)
    (remote_ip, remote_port, repy_socket) = this_affix_copy.get_next_affix_layer().tcpserversocket_getconnection(tcpserversocket)

    return (remote_ip, remote_port, AffixSocket(repy_socket, this_affix_copy))





  def openconnection(self, destip, destport, localip, localport, timeout):
    """
    <Purpose>
      This modifies the openconnection() method of this particular
      affix layer. It adds in a new HelloWorldAffix on its stack.

    <Argumetns>
      Same as the base affixs openconnection()

    <Side Effect>
      Modifies the stack beneath it.

    <Exceptions>
      Raised if one of the lower affixs raise an exception.

    <Return>
      A AffixSocket object.
    """
    # Create a new HelloWorldAffix
    new_affix = HelloWorldAffix(AffixStack(), ['2'])

    this_affix_copy = self.copy()

    # Push the new HelloWorldAffix on to the stack of the copied affix.
    this_affix_copy.affix_context['affix_stack'].push(new_affix)
    next_sockobj = self.get_next_affix_layer().openconnection(destip, destport, localip, localport, timeout)

    return AffixSocket(next_sockobj, this_affix_copy)





  def copy(self):
    """
    The copy function is implemented.
    """
    affix_stack_copy = self.affix_context['affix_stack'].deepcopy()
    optional_args_copy = self.affix_context['optional_args']

    my_copy = HelloWorldDeciderAffix(affix_stack_copy, optional_args_copy)
    
    return my_copy




  def get_advertisement_string(self):
    """
    The get_advertisement_string is implemented.
    """
    return '(HelloWorldDeciderAffix)' + self.get_next_affix_layer().get_advertisement_string()
