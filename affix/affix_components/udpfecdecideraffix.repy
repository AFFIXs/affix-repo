#!python
"""
<Program Name>
  udpfecdecideraffix.repy

<Author>
  Steven Portzer
  Fraidy Fund

<Date Started>
  December 11, 2011

<Purpose>
  Loads FEC for UDP messages based on throughput and drop rate.

"""

dy_import_module_symbols('udp_branching_lib')



class UdpFECDeciderAffix(BaseUdpDeciderAffix):

  # Use FEC if throughput in bytes per second exceeds this threshold.
  _DEFAULT_THROUGHPUT_THRESHOLD = 2**16

  # Use FEC if the message drop rate exceeds this threshold.
  _DEFAULT_DROP_RATE_THRESHOLD = 0.1



  _AFFIX_NAME = "UdpFECDeciderAffix"

  # Affix stacks this decider affix chooses between.
  _affix_string_list = ["(NoopAffix)", "(FECAffix)"]


  def __init__(self, affix_stack, optional_args=None):
    """
    If the first optional argument is provided it will be used as the
    throughput threshold below which FEC is not used.
    If a second optional argument is provided it will be used as the
    drop rate threshold above which FEC is used.
    """

    BaseUdpDeciderAffix.__init__(self, affix_stack, optional_args)

    if len(optional_args) > 2:
      raise AffixArgumentError("UdpFECDeciderAffix takes at most 2 optional arguments.")

    if optional_args:
      try:
        self._throughput_threshold = int(optional_args[0])
      except ValueError, err:
        raise AffixArgumentError("Bad optional args. " + optional_args[0] + " is not an int.")
    else:
      self._throughput_threshold = self._DEFAULT_THROUGHPUT_THRESHOLD

    if optional_args and len(optional_args) == 1:
      try:
        self._drop_rate_threshold = float(optional_args[1])
      except ValueError, err:
        raise AffixArgumentError("Bad optional args. " + optional_args[1] + " is not a float.")
    else:
      self._drop_rate_threshold = self._DEFAULT_DROP_RATE_THRESHOLD


  def _get_next_stack_id(self, statistics_list, has_remote_stats, time_elapsed, state_context):
    throughput = (statistics_list[0]['bytes_sent'] +
                  statistics_list[1]['bytes_sent']) / time_elapsed
    # Don't use FEC if throughput is under threshold.
    if throughput < self._throughput_threshold:
      return 0

    # If we didn't get statistics from the server, then we'll assume
    # the request or response was dropped and apply FEC to
    # compensate.
    if not has_remote_stats:
      return 1

    messages_sent = (statistics_list[0]['messages_sent'] +
                     statistics_list[1]['messages_sent'])
    messages_received = (statistics_list[0]['messages_received'] +
                         statistics_list[1]['messages_received'])

    # Use FEC if drop rate exceeds threshold. The messages
    # sent and received statistics may not be perfectly synchronized,
    # so increase the messages received to allow for noise.
    if messages_sent > 0:
      drop_rate = 1.0 - float(messages_received + 1) / messages_sent
      if drop_rate > self._drop_rate_threshold:
        return 1

    # Else, don't use FEC.
    return 0

  def copy(self):
    affix_stack_copy = self.affix_context['affix_stack'].deepcopy()
    optional_args = self.affix_context['optional_args']

    return UdpFECDeciderAffix(affix_stack_copy, optional_args)


  def get_advertisement_string(self):
    affix_string = "(UdpFECDeciderAffix," + \
                  str(self._throughput_threshold) + "," + \
                  str(self._drop_rate_threshold) + ")"
    return affix_string + self.get_next_affix_layer().get_advertisement_string()
